<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
namespace: 命名空间, 如果有对应的接口，需要指定为对应接口的全类名, 如果使用原生接口, 则可以随便填写
id: 唯一标识
parameterType: 为参数数据类型
resultType: 为返回值数据类型
#{username}是获取传递过来的参数中获取 username 的值
-->
<mapper namespace="com.example.mybatis.mapper.UserMapper">
    <select id="getUserByUserName"
            parameterType="String"
            resultType="com.example.mybatis.entity.User">
        select
        id, user_name , user_email userEmail, user_city userCity, age
        from t_user
        where user_name = #{username}
    </select>

    <select id="getUserList"
            resultType="com.example.mybatis.entity.User">
        select
        id, user_name, user_email userEmail, user_city userCity, age
        from t_user
    </select>

    <insert id="addUser"
            parameterType="com.example.mybatis.entity.User">
        insert into t_user
        (user_name, user_email, user_city, age)
        values (#{username}, #{userEmail}, #{userCity}, #{age})
    </insert>

    <delete id="deleteUser" parameterType="java.lang.Integer">
       delete from t_user where id = #{id}
    </delete>

    <update id="updateUser" parameterType="com.example.mybatis.entity.User">
       update t_user
       set user_name=#{username}, user_email=#{userEmail}, user_city=#{userCity}, age=#{age}
       where id=#{id}
    </update>
</mapper>
